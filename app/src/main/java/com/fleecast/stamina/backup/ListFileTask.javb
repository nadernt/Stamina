package com.fleecast.stamina.backup;

import android.os.AsyncTask;

import com.dropbox.core.DbxException;
import com.dropbox.core.v2.DbxClientV2;
import com.dropbox.core.v2.files.ListFolderResult;
import com.dropbox.core.v2.files.Metadata;
import com.fleecast.stamina.utility.Constants;
import com.fleecast.stamina.utility.Utility;

import java.util.AbstractList;
import java.util.ArrayList;
import java.util.List;

/**
 * Async task to list items in a folder
 */
class ListFileTask extends AsyncTask<String, Void, List<String>> {

    private final Callback mCallback;
    private final List<String> mfoldersToCrawl;
    private Exception mException;
    private ArrayList<String> cloudPathsAudioFiles;

    public interface Callback {
        void onDataLoaded(List <String> result);

        void onError(Exception e);
    }

    public ListFileTask(List<String> foldersToCrawl, Callback callback) {
        mfoldersToCrawl = new ArrayList<>(foldersToCrawl);
        mCallback = callback;
    }

    @Override
    protected void onPostExecute(List <String> result) {
        super.onPostExecute(result);

        if (mException != null) {
            mCallback.onError(mException);
        } else {
            mCallback.onDataLoaded(result);
        }
    }

    @Override
    protected List<String> doInBackground(String... params) {
        try {
            for (int i=0; i< mfoldersToCrawl.size(); i++) {
               // System.out.println(i + "yyyyyyyyyyyyyyyyyyyyyyyyyyy" + mfoldersToCrawl.size());

                if(!mfoldersToCrawl.get(i).contains(".") &&
                        !mfoldersToCrawl.get(i).contains(Constants.CONST_RECYCLEBIN_DIRECTORY_NAME) &&
                        !mfoldersToCrawl.get(i).contains(Constants.TEMP_FOLDER_NAME)) {

                    new ListFolderTask(DropboxClientFactory.getClient(), new ListFolderTask.Callback() {
                        @Override
                        public void onDataLoaded(ListFolderResult result) {

                            while (true) {

                                for (Metadata metadata : result.getEntries()) {
                                    System.out.println(metadata.getPathDisplay());
                                    cloudPathsAudioFiles.add(metadata.getPathDisplay());
                                }

                                if (!result.getHasMore()) {
                                    break;
                                }

                                try {
                                    result = DropboxClientFactory.getClient().files().listFolderContinue(result.getCursor());
                                } catch (DbxException e) {
                                    e.printStackTrace();
                                }
                            }
                        }

                        @Override
                        public void onError(Exception e) {
                            Utility.showMessage(e.getMessage(), "Error", ActivityBackupHome.this);
                        }
                    }).execute(mfoldersToCrawl.get(i));
                }
                else{

                    if(cloudPaths.get(i).contains(".journal"))
                        cloudPathsJournalFiles.add(cloudPaths.get(i));

                }
            }
            return mDbxClient.files().listFolder(params[0]);
        } catch (DbxException e) {
            mException = e;
        }

        return null;
    }
}
